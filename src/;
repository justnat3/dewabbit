// prevent the application from opening a termianl
#![windows_subsystem = "windows"]

extern crate native_windows_derive as nwd;
extern crate native_windows_gui as nwg;

use std::collections::HashMap;
use nwd::NwgUi;
use nwg::NativeUi;
use std::rc::Rc;
use std::cell::RefCell;
use std::ops::Deref;

#[derive(Default)]
struct Dupers {
    window: nwg::Window,
    go_button: nwg::Button,
    select_button: nwg::Button,
    dialog: nwg::FileDialog,
    // a place to store out path
    path: Option<String>,
}

impl Dupers {
    fn bye(&self) {
        if let Some(path) = &self.path {
            // this is where we are going to store all of our file hashes
            let mut map: HashMap<String, String> = HashMap::new();
            

        } else {
            let p = nwg::MessageParams {
                title: "WARNING",
                content: "A folder with duplicates has not been selected",
                buttons: nwg::MessageButtons::Ok,
                icons: nwg::MessageIcons::Warning
            };
            nwg::message(&p);
        }

        //nwg::stop_thread_dispatch();
    }

    fn open_dialog(&self, path: &mut String) {
        if self.dialog.run(Some(&self.window)) {
            if let Ok(directory) = self.dialog.get_selected_item() {
                let dir = directory.into_string().unwrap();
                println!("pushing str");
                path.push_str(&dir);
            }
        }
    }
}

struct Ui {
    // The reason we have to wrap in Rc is because this is the safest & simplist way
    // to handle callbacks
    inner: Rc<Dupers>,
    default_handler: RefCell<Option<nwg::EventHandler>>
}

fn load_icon() -> nwg::Icon {
    nwg::Icon::from_system(nwg::OemIcon::WinLogo)
}

impl nwg::NativeUi<Ui> for Dupers {
    fn build_ui(mut data: Dupers) -> Result<Ui, nwg::NwgError> {
        use nwg::Event as E;

        nwg::Window::builder()
            .flags(nwg::WindowFlags::WINDOW | nwg::WindowFlags::VISIBLE)
            .size((256, 200))
            .center(true)
            .title("Dupers")
            .icon(Some(&nwg::Icon::from_system(nwg::OemIcon::Ques)))
            .build(&mut data.window)?;

        nwg::Button::builder()
            .size((160, 60))
            .position((45,20))
            .text("Go!")
            .parent(&data.window)
            .build(&mut data.go_button)?;

        nwg::Button::builder()
            .size((160, 60))
            .position((45,90))
            .text("Select a Folder")
            .parent(&data.window)
            .build(&mut data.select_button)?;

        nwg::FileDialog::builder()
                .title("Pick a Directory with Duplicates")
                .action(nwg::FileDialogAction::OpenDirectory)
                .multiselect(false)
                .build(&mut data.dialog);

        let mut ui = Ui {
            inner: Rc::new(data),
            default_handler: Default::default()
        };

        let evt_ui = Rc::downgrade(&ui.inner);
        let handle_events = move |evt, _evt_data, handle| {
                if let Some(ui) = evt_ui.upgrade() {
                    match evt {
                        E::OnButtonClick => {
                            if &handle == &ui.go_button {
                                Dupers::bye(&ui);
                            }
                            let mut path = String::new();
                            if &handle == &ui.select_button {
                                Dupers::open_dialog(&ui, &mut path);
                            }
                            println!("asdlfk{:#?}", path);
                        },
                        E::OnWindowClose => 
                            nwg::stop_thread_dispatch(),
                        _ => {}
                    }
                };
            };

        *ui.default_handler.borrow_mut() = 
            Some(nwg::full_bind_event_handler(&ui.inner.window.handle, handle_events));

        return Ok(ui);
    }
}

fn main() {
    nwg::init().unwrap();

    let _app = Dupers::build_ui(Default::default()).unwrap();

    nwg::dispatch_thread_events();
}
